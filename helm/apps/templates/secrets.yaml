{{- if .Values.doppler.enabled }}
{{/*
Create a SecretStore using external-secrets.io, specifying the provider and the location of the token (which was
created during the system chart installation). Since we are defining a Custom Resource (CRD) that does not exist
until the external-secrets.io dependency is installed, we ensure this is done during the apps installation step.

https://medium.com/@peterkracik/injecting-secrets-to-kubernetes-containers-from-the-doppler-secrets-manager-ef491a20f45b
*/}}
{{- $secretsStoreName := "doppler-secret-store" -}}
apiVersion: external-secrets.io/v1beta1
kind: SecretStore

metadata:
  name: "{{ $secretsStoreName }}"
  namespace: {{ .Values.namespace }}

spec:
  provider:
    doppler: # configure the Doppler provider to use the Doppler API token, stored in the Secret
      auth:
        secretRef:
          dopplerToken: {name: "{{ template "doppler.secretName" }}", key: "{{ template "doppler.secretKeyName" }}"}

---

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret

metadata:
  name: doppler-external-secret
  namespace: {{ $.Values.namespace }}
  annotations:
    {{/* https://external-secrets.io/main/introduction/faq/#can-i-manually-trigger-a-secret-refresh */}}
    force-sync: {{ now | unixEpoch | quote }} # force the sync of the secrets

{{/* https://external-secrets.io/latest/api/externalsecret/#example */}}
spec:
  secretStoreRef: # what SecretStore to use
    kind: SecretStore
    name: "{{ $secretsStoreName }}"
  refreshInterval: 20m # how often to refresh the secrets
  target: {name: "{{ template "doppler.syncedSecretName" }}"} # where to store all the secrets (in vanilla K8s Secret)
  {{/* https://external-secrets.io/latest/provider/doppler/#2-fetch-all */}}
  dataFrom: [{find: {name: {regexp: .*}}}] # fetch all secrets from the Doppler
{{- end }}
